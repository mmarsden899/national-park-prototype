{"version":3,"sources":["SinglePark.js","Parks.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["parksData","require","SinglePark","props","state","park","parkName","target","this","specificPark","filter","Name","setState","className","src","Image","alt","Location","Established","Area","Description","Component","Parks","openModal","event","modal","selectedTarget","currentTarget","id","closeModal","parks","parksHTML","map","key","onClick","data","Thumbnail","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.833e962c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nconst parksData = require('./parks.json')\n\nclass SinglePark extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      park: {},\n      parkName: props.target\n    }\n  }\n\n  componentDidMount () {\n    const {parkName} = this.state\n    const specificPark = parksData.filter(function (park) {\n      return park.Name === parkName\n    })\n    this.setState({ park: specificPark[0]})\n  }\n\n\n  render () {\n    return (\n      <div className=\"park-modal\">\n      <div className=\"single-park-flex\">\n        <div className=\"park-image-container\">\n          <img\n            src={this.state.park.Image}\n            alt=\"temp\"\n            className=\"modal-image\"/>\n            </div>\n        <div className=\"park-info\">\n          <h3 className=\"modal-header\">{this.state.park.Name}</h3>\n          <h6 className=\"modal-sub-header\"><i>{this.state.park.Location}</i></h6>\n          <div className=\"modal-resp\">\n            <p className=\"info thirty-padding-top est\"><b>Established: </b>{this.state.park.Established}</p>\n            <p className=\"info area\"><b>Area: </b>{this.state.park.Area}</p>\n            <p className=\"info vis\"><b>Total Visitors: </b>{this.state.park['Recreation visitors']}</p>\n          </div>\n          <p className=\"modal-park-desc\">{this.state.park.Description}</p>\n        </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SinglePark\n","import React, { Component } from 'react'\nimport SinglePark from './SinglePark'\nconst parksData = require('./parks.json')\n\nclass Parks extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      parks: [],\n      modal: false,\n      selectedTarget: ''\n    }\n  }\n\n  componentDidMount () {\n    this.setState({ parks: parksData })\n  }\n\n  openModal = event => {\n    this.setState({ modal: !this.state.modal, selectedTarget: event.currentTarget.id })\n  }\n\n  closeModal = () => {\n    this.setState({modal: !this.state.modal})\n  }\n\n\n  render () {\n    const { parks } = this.state\n    const parksHTML = parks.map(park => (\n      <div key={park.Name} onClick={this.openModal} id={park.Name} data={park} className=\"parks\">\n        <div className=\"park-container\">\n        <img src={park.Thumbnail}\n             alt={\"thumbnail of \" + park.Name}\n             className=\"park-thumbnail\"/>\n          <div className=\"info-grid\">\n            <p className=\"park-name\">{park.Name} National Park</p>\n            <p className=\"info\"> <b>Location:</b> {park.Location} <b>Founded:</b> {park.Established}</p>\n            <p className=\"info\"> <b>Total Area:</b> {park.Area} <b>Total Visitors:</b> {park[\"Recreation visitors\"]}</p>\n            <p className=\"info desc\">{park.Description}</p>\n          </div>\n        </div>\n      </div>\n    ))\n    return (\n      <div className=\"container\" onClick={this.closeModal}>\n        {parksHTML}\n        {this.state.modal ? <SinglePark target={this.state.selectedTarget}/> : null}\n      </div>\n    )\n  }\n}\n\nexport default Parks\n","import React, { Component } from 'react'\n\nconst headerImage = \"https://img.pngio.com/forest-silhouette-png-101-images-in-collection-page-2-forest-silhouette-png-1400_471.png\"\n\nclass Header extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n    }\n  }\n\n  componentDidMount () {\n  }\n\n\n  render () {\n    return (\n      <div className=\"header-app\">\n        <img src={headerImage}\n          alt=\"\"\n          className=\"image-header\"/>\n        <h1 className=\"logo-text\">NATIONAL PARKS</h1>\n      </div>\n    )\n  }\n}\n\nexport default Header\n","import React from 'react';\nimport './App.scss';\n\nimport Parks from './Parks'\nimport Header from './Header'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-body\">\n        <Header/>\n        <Parks/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}